{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","calculateWinner","squares","lines","i","length","a","b","c","Square","val","handleClick","ki","className","onClick","renderSquare","values","renderRow","produce","l","HistoryButton","Board","status","Game","useState","Array","fill","setValues","xIsNext","setX","setStatus","history","setHistory","historyButtons","sethBtns","stepMove","setStepMove","slice","newXIsNext","slicedHistory","slicedButtons","winner","ReactDOM","render","document","getElementById"],"mappings":"mMAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,OCDd,SAASQ,EAAgBC,GAWvB,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KAGT,SAASG,EAAT,GAAgD,IAAD,IAA7BC,WAA6B,MAAvB,IAAuB,EAAlBC,EAAkB,EAAlBA,YAAaC,EAAK,EAALA,GACtC,OACE,wBAAQC,UAAU,SAAkBC,QAAS,kBAAKH,EAAYC,IAA9D,SACGF,GAD6BE,GAOtC,IAAMG,EAAe,SAAC,GAA8B,IAA7BX,EAA4B,EAA5BA,EAAGY,EAAyB,EAAzBA,OAAQL,EAAiB,EAAjBA,YAChC,OAAO,cAACF,EAAD,CAAgBC,IAAKM,EAAOZ,GAAIQ,GAAIR,EAAGO,YAAcA,GAAxCP,IAGhBa,EAAY,SAAC,GAEjB,IAF+C,IAA7Bb,EAA4B,EAA5BA,EAAGY,EAAyB,EAAzBA,OAAQL,EAAiB,EAAjBA,YACzBO,EAAU,GACLC,EAAIf,EAAGe,EAAIf,EAAE,EAAGe,IACvBD,EAAO,sBAAOA,GAAP,CAAgBH,EAAa,CAACX,EAAEe,EAAGH,SAAQL,kBAGpD,OACE,qBAAKE,UAAU,YAAf,SACIK,KAKFE,EAAgB,SAAC,GAAsB,IAArBhB,EAAoB,EAApBA,EAAGO,EAAiB,EAAjBA,YACzB,OACE,6BACE,wBAAQG,QAAS,kBAAIH,EAAYP,EAAE,IAAnC,SAAiDA,EAAE,IAAI,EAAE,oBAAR,gBAAuCA,EAAE,IAA9CA,MAKlD,SAASiB,EAAT,GAAgD,IAA/BL,EAA8B,EAA9BA,OAAQL,EAAsB,EAAtBA,YAAaW,EAAS,EAATA,OAEpC,OACE,gCACE,qBAAKT,UAAU,SAAf,SAAyBS,IACtBL,EAAU,CAACb,EAAE,EAAGY,SAAQL,gBACxBM,EAAU,CAACb,EAAE,EAAGY,SAAQL,gBACxBM,EAAU,CAACb,EAAE,EAAGY,SAAQL,mBAMjC,SAASY,IAAS,IAAD,EACaC,mBAASC,MAAM,GAAGC,KAAK,OADpC,mBACRV,EADQ,KACAW,EADA,OAESH,oBAAS,GAFlB,mBAERI,EAFQ,KAECC,EAFD,OAGaL,mBAAS,kBAHtB,mBAGRF,EAHQ,KAGAQ,EAHA,OAIeN,mBAAS,CAACR,IAJzB,mBAIRe,EAJQ,KAICC,EAJD,OAKoBR,mBAAS,IAL7B,mBAKRS,EALQ,KAKQC,EALR,OAMiBV,mBAAS,GAN1B,mBAMRW,EANQ,KAMEC,EANF,KAkCb,OACE,sBAAKvB,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACQ,EAAD,CAAOL,OAAQA,EAAQL,YA7BX,SAAAP,GAClB,IAAMF,EAAUc,EAAOqB,QACvB,IAAIpC,EAAgBC,KAAYA,EAAQE,GAAxC,CAEAF,EAAQE,GAAKwB,EAAU,IAAM,IAC7BI,EAAW,GAAD,mBAAKD,GAAL,CAAc7B,KAWxB2B,GAAMD,GACNQ,EAAYD,EAAS,GACrBR,EAAUzB,GACV4B,EAAU,gBAAD,OAAkBF,EAAgB,IAAN,MACrCM,EAAS,GAAD,mBAAKD,GAAL,CAAqB,cAAC,EAAD,CAAe7B,EAAG2B,EAAQ1B,OAAQM,YAd1C,SAACP,GACpB,IAAMkC,EAAclC,EAAI,IAAM,EAC9ByB,EAAMS,GACN,IAAMC,EAAgBR,EAAQM,MAAM,EAAEjC,EAAE,GAClCoC,EAAgBP,EAAeI,MAAM,EAAEjC,EAAE,GAC/C8B,EAAUM,GACVR,EAAYO,GACZZ,EAAWI,EAAQ3B,IACnB0B,EAAU,gBAAD,OAAmBQ,EAAa,IAAM,QAM8ClC,MAC/F,IAAMqC,EAASxC,EAAgBC,GAC5BuC,GACDX,EAAU,cAAD,OAAeW,MAM6BnB,OAAQA,MAE3D,sBAAKT,UAAU,YAAf,UACE,wBACA,6BAAKoB,UAQfS,IAASC,OACP,cAACpB,EAAD,IACAqB,SAASC,eAAe,SAO1BrD,M","file":"static/js/main.18dadd36.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nfunction Square({ val = 'i', handleClick, ki }){\n    return (\n      <button className=\"square\" key={ki} onClick={()=> handleClick(ki) }   >\n        {val}\n      </button>\n    );\n}\n\n\nconst renderSquare = ({i, values, handleClick}) => {\n  return <Square key={i} val={values[i]} ki={i} handleClick={ handleClick }  />;\n}\n\nconst renderRow = ({i, values, handleClick}) => {\n  let produce = []\n  for (let l = i; l < i+3; l++){\n    produce = [...produce, renderSquare({i:l, values, handleClick })]\n  }\n\n  return (\n    <div className=\"board-row\">\n      { produce }\n    </div>\n  )\n}\n\nconst HistoryButton = ({i, handleClick}) => {\n  return (\n    <li>\n      <button onClick={()=>handleClick(i-1)} key={i} >{i-1===0?'Start of the Game' : `Turn: ${i-1}`}</button>\n    </li>\n  )\n}\n\nfunction Board ({values, handleClick, status}) {\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n        {renderRow({i:0, values, handleClick})}\n        {renderRow({i:3, values, handleClick})}\n        {renderRow({i:6, values, handleClick})}\n    </div>\n  );\n}\n\n\nfunction Game () {\n  const [values, setValues] = useState(Array(9).fill(null))\n  const [xIsNext, setX] = useState(true)\n  const [status, setStatus] = useState(`Next Player: X`)\n  const [history, setHistory] = useState([values])\n  const [historyButtons, sethBtns] = useState([])\n  const [stepMove, setStepMove] = useState(0)\n\n  const handleClick = i => {\n    const squares = values.slice()\n    if (calculateWinner(squares) || squares[i]) \n      {      return     }\n    squares[i] = xIsNext ? 'X' : 'O'\n    setHistory([...history, squares])\n    const historyClick = (i) => { \n      const newXIsNext = (i % 2 === 0)\n      setX( newXIsNext )\n      const slicedHistory = history.slice(0,i+1)\n      const slicedButtons = historyButtons.slice(0,i+1)\n      sethBtns( slicedButtons )\n      setHistory( slicedHistory )\n      setValues( history[i] )\n      setStatus( `Next Player: ${ newXIsNext ? 'X' : 'O' }` )\n     }\n    setX(!xIsNext)\n    setStepMove(stepMove+1)\n    setValues(squares)\n    setStatus(`Next Player: ${!xIsNext ? 'X' : 'O'}`)\n    sethBtns([...historyButtons, <HistoryButton i={history.length} handleClick={historyClick} key={i} /> ])\n    const winner = calculateWinner(squares)\n    if(winner) \n      setStatus(`Winner is: ${winner}`)\n  }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board values={values} handleClick={handleClick} status={status} />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{historyButtons}</ol>\n        </div>\n      </div>\n    )\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}